// Generated by CoffeeScript 1.8.0
(function() {
  var Client, assert, nodemailer;

  Client = (require('../lib/yapople')).Client;

  assert = require('assert');

  nodemailer = require('nodemailer');

  describe('POP3 client tests', function() {
    var options, tlsOptions;
    this.timeout(20000);
    before(function(done) {
      var mailOptions, transporter;
      transporter = nodemailer.createTransport({
        service: 'Mail.ru',
        auth: {
          user: 'yapople@mail.ru',
          pass: 'yapopleyapopleyapopleyapople'
        }
      });
      mailOptions = {
        from: 'yapople@mail.ru',
        to: 'yapople@mail.ru',
        subject: 'Hello ✔',
        text: 'Hello world ✔',
        html: '<b>Hello world ✔</b>'
      };
      return transporter.sendMail(mailOptions, function(error, info) {
        if (error) {
          return console.log(error);
        } else {
          return done();
        }
      });
    });
    options = {
      hostname: 'pop.mail.ru',
      port: 110,
      username: 'yapople',
      password: 'yapopleyapopleyapopleyapople'
    };
    tlsOptions = {
      hostname: 'pop.mail.ru',
      port: 995,
      tls: true,
      username: 'yapople',
      password: 'yapopleyapopleyapopleyapople'
    };
    describe('connect', function() {
      it('should connect to the existing server', function(done) {
        var client;
        client = new Client(options);
        return client.connect(function(err, data) {
          assert.equal(err, null);
          client.disconnect();
          return done();
        });
      });
      it('should not login to TLS server without tls option', function(done) {
        var client;
        client = new Client(options);
        return client.connect(function(err, data) {
          assert.equal(err, null);
          return client.login(function(err, data) {
            assert.notEqual(err, null);
            assert.equal(err, 'POP3 is available only with SSL or TLS connection enabled');
            client.disconnect();
            return done();
          });
        });
      });
      return it('should login to TLS server with tls option', function(done) {
        var client;
        client = new Client(tlsOptions);
        return client.connect(function(err, data) {
          assert.equal(err, null);
          return client.login(function(err, data) {
            assert.equal(err, null);
            assert.equal(data, 'Welcome!');
            client.disconnect();
            return done();
          });
        });
      });
    });
    describe('stat command', function() {
      return it('return message stat count', function(done) {
        var client;
        client = new Client(tlsOptions);
        return client.connect(function(err, data) {
          assert.equal(err, null);
          return client.login(function(err, data) {
            assert.equal(err, null);
            return client.stat(function(err, data) {
              assert.equal(err, null);
              console.log(data);
              client.disconnect();
              return done();
            });
          });
        });
      });
    });
    return describe('list command', function() {
      return it('return message list count', function(done) {
        var client;
        client = new Client(tlsOptions);
        return client.connect(function(err, data) {
          assert.equal(err, null);
          return client.login(function(err, data) {
            assert.equal(err, null);
            return client.list(function(err, data) {
              assert.equal(err, null);
              console.log(data);
              client.disconnect();
              return done();
            });
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=main.js.map
